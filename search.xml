<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA 数据类型划分【Java 学习笔记 05】</title>
      <link href="/2020/03/20/JAVA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/"/>
      <url>/2020/03/20/JAVA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>程序是一套数字处理的游戏框架，在程序开发的过程之中，最终目的就是对一些数据进行处理，就必须提供各种类型的数据定义</p><a id="more"></a><h1 id="Java-数据类型简介"><a href="#Java-数据类型简介" class="headerlink" title="Java 数据类型简介"></a>Java 数据类型简介</h1><p>Java 中数据类型一共分为两类：</p><ul><li>基本数据类型：描述的是一些具体的数字单元<ul><li>数值型<ul><li>整型：byte、short、int、long ➡ 默认值：0</li><li>浮点型：float、double ➡ 默认值：0.0</li></ul></li><li>布尔型：boolean ➡ 默认值：false</li><li>字符型：char ➡ 默认值：’\u0000’</li></ul></li><li>引用数据类型：牵扯到内存关系的使用<ul><li>数组、类、接口 ➡ 默认值：null</li></ul></li></ul><p>每一种基本的数据类型都有每一种类型保存的数据范围，这将影响数据类型的选择，数据类型使用参考原则：</p><ul><li>如果描述数字，首选：int（整数）、double（小数）</li><li>如果要进行数据传输或者进行文字编码转换，使用：byte（二进制处理操作）</li><li>处理中文，最方便使用：char</li><li>描述内存或者文件大小或者表的主键列可以使用：long</li></ul><h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><p>整型数据一共有 4 种，按照保存范围由小到大：byte、short、int、long，在 Java 里面任何的一个整型常量其默认数据类型都是 int 型（只要是整数就是 int 型）</p><p>eg. 定义 int 型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int 变量名 = 常量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// 定义了一个整型变量的 a</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 改变已有变量的值</span></span><br><span class="line">        <span class="comment">// int 型变量 * int 型变量 = int 型数据</span></span><br><span class="line">        System.out.println(a * a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量是可以改变的，常量是不会变化的</p><p>任何数据类型都有其可以保存的范围，正常使用下很少会出现超出范围的数据，如果超出最大的保存范围，将会出现循环的问题，在 Java 种这种现象叫数据溢出，解决数据溢出的办法：</p><ul><li>在操作的时候预估数据范围，如果发现范围不够，就是用更大数据范围的数据类型</li><li>直接从常量上进行处理，默认的整数常量是 int 型，可以为它追加字母 <code>L</code> 或直接使用 <code>(long)</code> 转换</li></ul><p>eg. 数据类型转换：int ➡ long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2L</span> <span class="comment">// 追加字母 L</span></span><br><span class="line"><span class="number">2l</span> <span class="comment">// 同样的追加字母 l，但是一定避免使用小写字母 l</span></span><br><span class="line">(<span class="keyword">long</span>)<span class="number">2</span> <span class="comment">// 强制转换</span></span><br></pre></td></tr></table></figure><p>数据类型之间是可以相互转换的，范围小的数据类型可以自动转为范围大的数据类型，但是范围大的数据类型转换成范围小的数据类型必须使用强制性的处理模式，并且同时还有可能发生数据溢出，所以不建议使用强制转换</p><p>在进行整型处理的时候，byte 类型的范围是 -128 ~ 127 之间，它保存的数据量很小</p><p>eg. 定义 byte 变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> num = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 程序里面 20 应该是 int 型的数据，但是在为 byte 赋值的时候并没有因是 int 型就发生强制转换，这是因为 Java 对 byte 做了特殊处理，即：如果没超过 byte 范围的常量可以自动由 int 变为 byte，如果超过就必须强制转换</p><p>对于常量，可以自动适配转换，对于变量则还是必须使用强制转换</p><h1 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h1><p>浮点型数据描述的是小数，在 Java 里任意一个小数常量对应的类型为 double，建议以后描述小数都是用 double</p><p>所有数据类型进行自动转型的时候都是由小类型向大类型转换，默认的小数类型为 double，但是也可以定义位数相对较少的 float 变量，这时 eg. <code>float = 11.1</code> 会报错，因为小数默认为 double，必须使用强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.1F</span></span><br><span class="line"><span class="number">11.1f</span></span><br><span class="line">(<span class="keyword">float</span>)<span class="number">11.1</span></span><br></pre></td></tr></table></figure><p>整型是不包含小数点的，如果整型的计算结果有小数会自动省去</p><h1 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h1><p>字符型使用 char 定义，使用 <code>&#39;&#39;</code> 括起来，在任何编程语言中，字符都可以与 int 相互转换，即字符所描述的内容可以通过 int 获取其内容对应的系统编码</p><ul><li>大写字母编码范围：A（65）~ Z（90）</li><li>小写字母编码范围：a（97）~ z（122）</li><li>数字编码范围：’0’（48）~ ‘9’（57）</li></ul><p>Java 中允许 char 定义中文字符，因为 Java 使用的是 unicode 十六进制编码，该编码特点是可以包含任意文字内容</p><h1 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h1><p>布尔主要描述的是一种逻辑的处理结果，在 Java 中使用 boolean 来进行布尔类型的变量定义，布尔类型的取值范围只有两个数据：true、false</p><p>有一些编程语言，由于并没有提供布尔类型，所以会使用 0 标识 false，使用非 0 标识 true，但是这样的逻辑在 Java 中不存在</p><h1 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h1><p>在任何编程语言里面都没有提供字符串这种基本数据，但是从实际使用上来讲，各个编程语言为了方便程序开发，也会提供字符串的相应描述，在 Java 里面使用 String 作为字符串的定义，由于 String 类存在比较特殊，所以其可以像普通变量那样采用直接赋值的方式进行字符串的定义，并使用 <code>&quot;&quot;</code> 将字符串括起来</p><p>在使用字符串变量的时候，可以使用 <code>+</code> 来连接不同的字符串</p><p>在 Java 语言里面，数据范围大的数据与数据范围小的数据进行计算的时候，数据范围小的数据会自动转为数据范围大的数据，而当存在 String 时，所有类型无条件变为 String</p><p>在描述字符串的时候可以使用转义字符进行一些处理：</p><ul><li>TAB《=》<code>\t</code></li><li>“《=》<code>\&quot;</code></li><li>‘《=》<code>\&#39;</code></li><li>换行《=》<code>\n</code></li><li>\《=》<code>\\</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基本概念【Java 学习笔记 04】</title>
      <link href="/2020/03/20/Java%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/03/20/Java%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>注释是程序开发之中的一项重要组成技术，合理的注释能使项目维护更加方便</p><a id="more"></a><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在 Java 语言里面注释一共有三类：</p><ul><li>单行注释：// xxxxxx</li><li>多行注释：/* xxxxx */</li><li>文档注释：/** xxxxx */，文档注释里面还需要很多的选项，一般建议共同开发工具控制</li></ul><p>eg. 定义单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单行注释：下面的语句是进行一行提示信息的输出</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg. 定义多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        单行注释：</span></span><br><span class="line"><span class="comment">        下面的语句是进行一行提示信息的输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用开发工具开发时，还是单行注释会比较方便，而对于一些重要的类和方法都建议使用文档注释</p><h1 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h1><p>在任何程序之中，都是一个结构的整合体，在 Java 语言里面有不同的结构，eg. 类、方法、变量结构等，对于不同的结构一定要有不同的说明，对于结构的说明实际上就是标识符，是有命名要求的，但是一般都是要求有意义的单词所组成，同时对于标识符的组成在 Java 之中定义如下：</p><ul><li>由字母、数字、_、$ 所组成</li><li>不能使用数字开头</li><li>不能使用 Java 中的保留字（关键字）</li></ul><p>最简单的定义标识符的形式：使用英文开头，对于 $ 一般都有特殊的含义，不建议出现在自己所编写的代码之中</p><p>关键字：系统对于一些结构的描述处理，有特殊的含义，eg. public、class 等，Java 中的关键字一共有如下内容：</p><ul><li>不需要背，必要时可上网查</li></ul><p>对于关键字的定义不需要背，对于部分关键字有一些简短说明</p><ul><li>JDK 1.4 =》assert 关键字，用于异常处理</li><li>JDK 1.5 =》enum 关键字，用于枚举定义</li><li>未使用到的关键字：goto、const</li><li>还有一些属于特殊含义的单词，严格来讲不算关键字：true、false、null</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 Java 开发【Java 学习笔记 03】</title>
      <link href="/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/"/>
      <url>/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>编写 Java 程序可以不使用特定编辑器，所有 Java 程序的后缀都是 <code>*.java</code>，我们可以建立一个目录保存所有的程序源代码</p><a id="more"></a><h1 id="Java-编程起步"><a href="#Java-编程起步" class="headerlink" title="Java 编程起步"></a>Java 编程起步</h1><p>定义第一个程序代码：</p><p><code>Hello.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 程序需要经过两次处理才可以正常执行：</p><ul><li>对源代码程序进行编译：<code>javac Hello.java</code>，编译之后会生成一个 <code>Hello.class</code> 的字节码文件，整个过程原理就是利用 JVM 编译出一套与操作平台无关的字节码文件（<code>*.class</code>）</li><li>在 JVM 上进行程序的解释：<code>java Hello</code>，<strong>注意：</strong> 这里解释的是字节码文件，字节码文件的后缀（<code>*.class</code>）是不需要编写的</li></ul><p>解释一下第一个程序：</p><ol><li>在 Java 程序开发中最基础的单元是类，所有的程序都必须封装在类当中执行，而类的基本定义语法如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在程序中定义的类名称是：<code>Hello</code>，类的定义有两种形式：</p><ul><li><code>public class 类名称 {}</code>：类名称必须与文件名称保持一致，在一个 <code>*.java</code> 文件里只能有一个 <code>public class</code> 定义</li><li><code>class 类名称 {}</code>：类名称可以与文件名称不一致，但是编译后的 <code>*.class</code> 的名称是 <code>calss</code> 定义的类，解释的时候要求解释生成的 <code>*.class</code> 字节码文件，在一个 <code>*.java</code> 文件里面可以有多个 <code>class</code> 定义，并且编译之后会生成不同的 <code>*.class</code> 文件</li></ul><p><strong>注意：</strong> 关于源代码类定义的问题：</p><ul><li>在项目开发中，很少会出现在一个 <code>*.java</code> 源代码里面定义多个 <code>class</code> 类的情况，所以一般在一个 <code>*.java</code> 源代码里就定义一个 <code>public class</code> 类就够了</li><li>Java 语言有着明确的要求，定义类名称的时候要求每一个单词的首字母必须大写，eg. HelloWorld、TestDemo 这样才符合标准</li></ul><ol start="2"><li>主方法：是所有程序执行的起点，并且一定要定义在类中，Java 的主方法定义：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 程序的代码由此开始执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>String args[]</code> &lt;=&gt; <code>String [] args</code></p><p>必须记住主方法怎么写，即使没有代码补全也能写出来，主方法所在的类统一称为 “主类”，所有的 “主类” 都使用 <code>public class 类名称 {}</code> 来定义</p><ol start="3"><li>屏幕打印（系统输出）：可以直接在命令行方式下进行内容的显示，有如下两种语法：</li></ol><ul><li>输出之后追加换行：<code>System.out.println(输出内容);</code></li><li>输出之后不追加换行：<code>System.out.print(输出内容);</code></li></ul><h1 id="JShell-工具"><a href="#JShell-工具" class="headerlink" title="JShell 工具"></a>JShell 工具</h1><p>Shell 是脚本程序的含义，在很多编程语言里面为了方便使用者进行代码开发，都会有 Shell 交互式编程环境，可能只是为了一些简短的程序验证，但是在 Java 里面需要编写很多的结构代码才能实现，所以为了解决这样的麻烦，提供了 JShell 指令，直接 cmd 执行指令 <code>jshell</code> 即可</p><p>除了可以直接在 JShell 命令之中进行程序的编写之外，也可以将一些内容交给一些文件来进行保存</p><p>eg. 在 <code>D:/hello.txt</code> 写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.out.println(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><p>在 JShell 执行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;open d:&#x2F;hello.txt</span><br></pre></td></tr></table></figure><p>屏幕能够成功输出 <code>hello</code></p><p>所以使用 JShell 只需要编写核心结构的代码即可，减少了对于结构化的需求，执行指令 <code>/exit</code> 即可退出 JShell 交互式界面</p><h1 id="CLASSPATH-环境属性"><a href="#CLASSPATH-环境属性" class="headerlink" title="CLASSPATH 环境属性"></a>CLASSPATH 环境属性</h1><p>CLASSPATH 完整理解非常复杂，这里暂时了解其概念</p><p>eg. 在 <code>D:/JavaCode</code> 下有一个叫 <code>Hello.class</code> 的字节码文件，当前用户所在的目录为 <code>D:/JavaCode</code>，那么在这种情况之下可以直接使用 <code>java</code> 命令进行 <code>Hello.class</code> 字节码文件的解释，但是如果现在用户脱离了这个目录，去到了 <code>C:/</code> （C 盘目录下并没有 <code>Hello.class</code> 字节码文件），如果再次执行程序解释，会出现错误提示：<code>找不到或无法加载主类 Hello</code></p><p>如果我们要执行不同目录下的程序，就需要依靠 CLASSPATH 环境属性</p><p>定义 CLASSPATH 环境属性：<code>SET CLASSPATH = D:/JavaCode</code></p><p>设置了 CLASSPATH 之后，这个时候在 Java 程序解释的时候会自动通过 CLASSPATH 所设置的路径进行类的加载，所以可知：JVM 解释程序的时候需要得到 CLASSPATH 的支持</p><p>但是在默认情况下，所有解释的类都是从当前所在的目录中加载的，所以可知：CLASSPATH 的默认设置为当前所在目录加载类文件，很明显如果在非当前目录设置 CLASSPATH 就会使整个系统操作混乱，所以最好采用默认的设置，如果这时候想只通过当前目录加载，则可以将 CLASSPATH 设置为 <code>.</code></p><p>eg. 设置从当前所在路径加载类 <code>SET CLASSPATH = .</code></p><p>有些时候如果安装了一些与 Java 开发相关的程序，它可能会自动修改默认的 CLASSPATH，所以就需要自己设置回来</p><p><strong>注意：</strong> 现在 CLASSPATH 是在一个命令行下的配置，如果该命令行关闭了，那么相关的属性配置也将消失，所以应该将其定义为全局属性，则可以直接在系统中追加一个属性信息</p><p>配置方法：新建用户变量 <code>CLASSPATH = .</code></p><p>PATH 和 CLASSPATH 的区别？</p><ul><li>PATH：是操作系统提供的路径配置，定义所有可执行程序的路径</li><li>CLASSPATH：是 JRE 提供的，用于定义 Java 程序解释时的类加载路径，默认设置为当前目录加载，可以通过 <code>SETCLASSPATH = 路径</code> 的命令形式来进行定义</li></ul><p>JVM 解释字节码文件的寻访过程：JVM ➡ CLASSPATH 定义的路径 ➡ 加载字节码文件，所以 CLASSPATH 是 Java 定义的环境属性，是在 Java 程序解释的时候使用的</p>]]></content>
      
      
      <categories>
          
          <category> Java 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 JAVA 开发环境【Java 学习笔记 02】</title>
      <link href="/2020/03/20/%E6%90%AD%E5%BB%BAJAVA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/03/20/%E6%90%AD%E5%BB%BAJAVA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Java 语言属于编译型和解释型语言的开发语言，如果要进行 Java 开发，一定要进行 JDK （Java 开发工具）的安装配置，JDK 可以实现 Java 语言的编译与解释</p><a id="more"></a><h1 id="JDK-简介"><a href="#JDK-简介" class="headerlink" title="JDK 简介"></a>JDK 简介</h1><ul><li>如果进行实际的项目开发的生产环境部署，现阶段还是应该以使用 JDK 1.8 版本为主</li><li>JDK 1.9 和 JDK 1.10 差别不大</li><li>JRE 指的是 Java 运行时环境，只提供程序的解释功能，不提供程序的开发功能，当本机上已经配置好了 JDK 之后，将自动进行 JRE 的更新</li></ul><h1 id="JDK-安装与配置"><a href="#JDK-安装与配置" class="headerlink" title="JDK 安装与配置"></a>JDK 安装与配置</h1><p>安装：不会就自行百度</p><p>在 JDK 里所有的可执行程序的路径为：X:\xx\jdk-xx\bin，主要使用 <code>javac.exe</code> 和 <code>java.exe</code>，但是这两个程序并不属于 Windows 本身，如果想要在命令行里面直接使用，就必须在 Windows 的系统环境之中进行可执行程序的路径配置</p>]]></content>
      
      
      <categories>
          
          <category> Java 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 语言简介【Java 学习笔记 01】</title>
      <link href="/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Java 之所以可以得到持续的发展力以及良好的生态系统，这完全取决于 Java 自身的技术特征：</p><a id="more"></a><h1 id="Java-的主要特点"><a href="#Java-的主要特点" class="headerlink" title="Java 的主要特点"></a>Java 的主要特点</h1><ol><li>是一个行业内通用的技术实现标准，Java 本身是一个半开源产品，很多厂商能够接触到 Java 的底层，使得 Java 开发更加透明</li><li>是一门面向对象编程语言，使得 Java 语言语法结构更加方便开发者接受，且这些面向对象的设计思想还在不断进行着扩充（不同的 JDK 版本）</li><li>提供有方便的内存回收处理机制，像一些编程语言里需要明确的手工进行对象的回收与释放，否则程序将不能正常提供支持，但是 Java 提供自动的内存回收操作，这样会更加方便（但是又涉及到优化方面的问题）</li><li>避免了复杂的指针问题，而使用更加简单的引用来代替指针，指针虽然是一种高效的内存处理模式，但是需要很强的逻辑分析，而 Java 在设计之初就考虑到了这一点，所以直接利用引用就可以简化指针的处理，而引用也是在初学过程中最为麻烦，最难以理解的部分</li><li>Java 是为数不多支持多线程开发的编程语言，这样就可以使得单位时间内处理的性能得到提升（性能的提升并不是绝对的），多线程开发也是 Java 开发之中最难以理解的一部分，而正确的多线程处理才是提升处理性能的核心所在</li><li>Java 提供有高效的网络处理能力，可以基于 NIO 实现更加高效的数据传输处理</li><li>Java 具有良好的可移植性，这样就可以提升一个程序的适用范围</li></ol><h1 id="Java-的可移植性"><a href="#Java-的可移植性" class="headerlink" title="Java 的可移植性"></a>Java 的可移植性</h1><p>这是 Java 语言最大的特点，指的是同一个程序可以在不同的操作系统之间进行任意的部署，以此降低了开发的难度</p><p>想要实现可移植性的控制，主要是依靠 JVM （Java 虚拟机）</p><p>Java 虚拟机是一个由软件和硬件模拟出来的计算机，所有的程序只要有 Java 虚拟机的支持，就可以实现程序的执行，并且不同的操作系统上会有不同的 Java 虚拟机存在，这样就可以实现移植性</p><p>所有 Java 程序的解释都要求放在 JVM 里处理</p><p>所有 *.java 的源代码程序最终都需要经过编译后才能使用，但是编译完成的程序代码并不是绑定在某个具体操作系统上的程序，而是一种通用性的程序，这种通用性的程序就是 JVM 能够识别的代码</p><p>Java 编译器只针对 JVM 产生 *.class 文件，独立于平台之外，所以 *.class 只针对不同的 JVM 生成，由 JVM 去适应平台</p><p>所有的 Java 程序并不是直接运行在操作系统上，而是通过 JVM 执行，这样比直接在操作系统上执行程序的处理速度要慢，但是随着硬件技术的提高，这些问题可以忽略，只是依然存在 JVM 的调优问题</p>]]></content>
      
      
      <categories>
          
          <category> Java 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TUFZ&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/9e970c58d441a1f42dead553ef9ca78d</icon>
  <subtitle>静心守志</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itufz.com/"/>
  <updated>2020-03-20T03:12:26.678Z</updated>
  <id>http://itufz.com/</id>
  
  <author>
    <name>TUFZ</name>
    <email>waringhu@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识Java开发【Java 学习笔记 03】</title>
    <link href="http://itufz.com/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/"/>
    <id>http://itufz.com/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/</id>
    <published>2020-03-20T01:46:51.000Z</published>
    <updated>2020-03-20T03:12:26.678Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java-编程起步"><a href="#Java-编程起步" class="headerlink" title="Java 编程起步"></a>Java 编程起步</h1><p>编写 Java 程序可以不使用特定编辑器，所有 Java 程序的后缀都是 <code>*.java</code>，我们可以建立一个目录保存所有的程序源代码</p><a id="more"></a><p>定义第一个程序代码：</p><p><code>Hello.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 程序需要经过两次处理才可以正常执行：</p><ul><li>对源代码程序进行编译：<code>javac Hello.java</code>，编译之后会生成一个 <code>Hello.class</code> 的字节码文件，整个过程原理就是利用 JVM 编译出一套与操作平台无关的字节码文件（<code>*.class</code>）</li><li>在 JVM 上进行程序的解释：<code>java Hello</code>，<strong>注意：</strong> 这里解释的是字节码文件，字节码文件的后缀（<code>*.class</code>）是不需要编写的</li></ul><p>解释一下第一个程序：</p><ol><li>在 Java 程序开发中最基础的单元是类，所有的程序都必须封装在类当中执行，而类的基本定义语法如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在程序中定义的类名称是：<code>Hello</code>，类的定义有两种形式：</p><ul><li><code>public class 类名称 {}</code>：类名称必须与文件名称保持一致，在一个 <code>*.java</code> 文件里只能有一个 <code>public class</code> 定义</li><li><code>class 类名称 {}</code>：类名称可以与文件名称不一致，但是编译后的 <code>*.class</code> 的名称是 <code>calss</code> 定义的类，解释的时候要求解释生成的 <code>*.class</code> 字节码文件，在一个 <code>*.java</code> 文件里面可以有多个 <code>class</code> 定义，并且编译之后会生成不同的 <code>*.class</code> 文件</li></ul><p><strong>注意：</strong> 关于源代码类定义的问题：</p><ul><li>在项目开发中，很少会出现在一个 <code>*.java</code> 源代码里面定义多个 <code>class</code> 类的情况，所以一般在一个 <code>*.java</code> 源代码里就定义一个 <code>public class</code> 类就够了</li><li>Java 语言有着明确的要求，定义类名称的时候要求每一个单词的首字母必须大写，eg. HelloWorld、TestDemo 这样才符合标准</li></ul><ol start="2"><li>主方法：是所有程序执行的起点，并且一定要定义在类中，Java 的主方法定义：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 程序的代码由此开始执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>String args[]</code> &lt;=&gt; <code>String [] args</code></p><p>必须记住主方法怎么写，即使没有代码补全也能写出来，主方法所在的类统一称为 “主类”，所有的 “主类” 都使用 <code>public class 类名称 {}</code> 来定义</p><ol start="3"><li>屏幕打印（系统输出）：可以直接在命令行方式下进行内容的显示，有如下两种语法：</li></ol><ul><li>输出之后追加换行：<code>System.out.println(输出内容);</code></li><li>输出之后不追加换行：<code>System.out.print(输出内容);</code></li></ul><h1 id="JShell-工具"><a href="#JShell-工具" class="headerlink" title="JShell 工具"></a>JShell 工具</h1><p>Shell 是脚本程序的含义，在很多编程语言里面为了方便使用者进行代码开发，都会有 Shell 交互式编程环境，可能只是为了一些简短的程序验证，但是在 Java 里面需要编写很多的结构代码才能实现，所以为了解决这样的麻烦，提供了 JShell 指令，直接 cmd 执行指令 <code>jshell</code> 即可</p><p>除了可以直接在 JShell 命令之中进行程序的编写之外，也可以将一些内容交给一些文件来进行保存</p><p>eg. 在 <code>D:/hello.txt</code> 写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.out.println(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><p>在 JShell 执行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;open d:&#x2F;hello.txt</span><br></pre></td></tr></table></figure><p>屏幕能够成功输出 <code>hello</code></p><p>所以使用 JShell 只需要编写核心结构的代码即可，减少了对于结构化的需求，执行指令 <code>/exit</code> 即可退出 JShell 交互式界面</p><h1 id="CLASSPATH-环境属性"><a href="#CLASSPATH-环境属性" class="headerlink" title="CLASSPATH 环境属性"></a>CLASSPATH 环境属性</h1><p>CLASSPATH 完整理解非常复杂，这里暂时了解其概念</p><p>eg. 在 <code>D:/JavaCode</code> 下有一个叫 <code>Hello.class</code> 的字节码文件，当前用户所在的目录为 <code>D:/JavaCode</code>，那么在这种情况之下可以直接使用 <code>java</code> 命令进行 <code>Hello.class</code> 字节码文件的解释，但是如果现在用户脱离了这个目录，去到了 <code>C:/</code> （C 盘目录下并没有 <code>Hello.class</code> 字节码文件），如果再次执行程序解释，会出现错误提示：<code>找不到或无法加载主类 Hello</code></p><p>如果我们要执行不同目录下的程序，就需要依靠 CLASSPATH 环境属性</p><p>定义 CLASSPATH 环境属性：<code>SET CLASSPATH = D:/JavaCode</code></p><p>设置了 CLASSPATH 之后，这个时候在 Java 程序解释的时候会自动通过 CLASSPATH 所设置的路径进行类的加载，所以可知：JVM 解释程序的时候需要得到 CLASSPATH 的支持</p><p>但是在默认情况下，所有解释的类都是从当前所在的目录中加载的，所以可知：CLASSPATH 的默认设置为当前所在目录加载类文件，很明显如果在非当前目录设置 CLASSPATH 就会使整个系统操作混乱，所以最好采用默认的设置，如果这时候想只通过当前目录加载，则可以将 CLASSPATH 设置为 <code>.</code></p><p>eg. 设置从当前所在路径加载类 <code>SET CLASSPATH = .</code></p><p>有些时候如果安装了一些与 Java 开发相关的程序，它可能会自动修改默认的 CLASSPATH，所以就需要自己设置回来</p><p><strong>注意：</strong> 现在 CLASSPATH 是在一个命令行下的配置，如果该命令行关闭了，那么相关的属性配置也将消失，所以应该将其定义为全局属性，则可以直接在系统中追加一个属性信息</p><p>配置方法：新建用户变量 <code>CLASSPATH = .</code></p><p>PATH 和 CLASSPATH 的区别？</p><ul><li>PATH：是操作系统提供的路径配置，定义所有可执行程序的路径</li><li>CLASSPATH：是 JRE 提供的，用于定义 Java 程序解释时的类加载路径，默认设置为当前目录加载，可以通过 <code>SETCLASSPATH = 路径</code> 的命令形式来进行定义</li></ul><p>JVM 解释字节码文件的寻访过程：JVM ➡ CLASSPATH 定义的路径 ➡ 加载字节码文件，所以 CLASSPATH 是 Java 定义的环境属性，是在 Java 程序解释的时候使用的</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-编程起步&quot;&gt;&lt;a href=&quot;#Java-编程起步&quot; class=&quot;headerlink&quot; title=&quot;Java 编程起步&quot;&gt;&lt;/a&gt;Java 编程起步&lt;/h1&gt;&lt;p&gt;编写 Java 程序可以不使用特定编辑器，所有 Java 程序的后缀都是 &lt;code&gt;*.java&lt;/code&gt;，我们可以建立一个目录保存所有的程序源代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建JAVA开发环境【Java 学习笔记 02】</title>
    <link href="http://itufz.com/2020/03/20/%E6%90%AD%E5%BB%BAJAVA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://itufz.com/2020/03/20/%E6%90%AD%E5%BB%BAJAVA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2020-03-20T01:45:12.000Z</published>
    <updated>2020-03-20T01:50:01.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JDK-简介"><a href="#JDK-简介" class="headerlink" title="JDK 简介"></a>JDK 简介</h1><p>Java 语言属于编译型和解释型语言的开发语言，如果要进行 Java 开发，一定要进行 JDK （Java 开发工具）的安装配置，JDK 可以实现 Java 语言的编译与解释</p><a id="more"></a><ul><li>如果进行实际的项目开发的生产环境部署，现阶段还是应该以使用 JDK 1.8 版本为主</li><li>JDK 1.9 和 JDK 1.10 差别不大</li><li>JRE 指的是 Java 运行时环境，只提供程序的解释功能，不提供程序的开发功能，当本机上已经配置好了 JDK 之后，将自动进行 JRE 的更新</li></ul><h1 id="JDK-安装与配置"><a href="#JDK-安装与配置" class="headerlink" title="JDK 安装与配置"></a>JDK 安装与配置</h1><p>安装：不会就自行百度</p><p>在 JDK 里所有的可执行程序的路径为：X:\xx\jdk-xx\bin，主要使用 <code>javac.exe</code> 和 <code>java.exe</code>，但是这两个程序并不属于 Windows 本身，如果想要在命令行里面直接使用，就必须在 Windows 的系统环境之中进行可执行程序的路径配置</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDK-简介&quot;&gt;&lt;a href=&quot;#JDK-简介&quot; class=&quot;headerlink&quot; title=&quot;JDK 简介&quot;&gt;&lt;/a&gt;JDK 简介&lt;/h1&gt;&lt;p&gt;Java 语言属于编译型和解释型语言的开发语言，如果要进行 Java 开发，一定要进行 JDK （Java 开发工具）的安装配置，JDK 可以实现 Java 语言的编译与解释&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java语言简介【Java 学习笔记 01】</title>
    <link href="http://itufz.com/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>http://itufz.com/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</id>
    <published>2020-03-20T01:28:44.000Z</published>
    <updated>2020-03-20T01:48:37.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java-的主要特点"><a href="#Java-的主要特点" class="headerlink" title="Java 的主要特点"></a>Java 的主要特点</h1><p>Java 之所以可以得到持续的发展力以及良好的生态系统，这完全取决于 Java 自身的技术特征：</p><a id="more"></a><ol><li>是一个行业内通用的技术实现标准，Java 本身是一个半开源产品，很多厂商能够接触到 Java 的底层，使得 Java 开发更加透明</li><li>是一门面向对象编程语言，使得 Java 语言语法结构更加方便开发者接受，且这些面向对象的设计思想还在不断进行着扩充（不同的 JDK 版本）</li><li>提供有方便的内存回收处理机制，像一些编程语言里需要明确的手工进行对象的回收与释放，否则程序将不能正常提供支持，但是 Java 提供自动的内存回收操作，这样会更加方便（但是又涉及到优化方面的问题）</li><li>避免了复杂的指针问题，而使用更加简单的引用来代替指针，指针虽然是一种高效的内存处理模式，但是需要很强的逻辑分析，而 Java 在设计之初就考虑到了这一点，所以直接利用引用就可以简化指针的处理，而引用也是在初学过程中最为麻烦，最难以理解的部分</li><li>Java 是为数不多支持多线程开发的编程语言，这样就可以使得单位时间内处理的性能得到提升（性能的提升并不是绝对的），多线程开发也是 Java 开发之中最难以理解的一部分，而正确的多线程处理才是提升处理性能的核心所在</li><li>Java 提供有高效的网络处理能力，可以基于 NIO 实现更加高效的数据传输处理</li><li>Java 具有良好的可移植性，这样就可以提升一个程序的适用范围</li></ol><h1 id="Java-的可移植性"><a href="#Java-的可移植性" class="headerlink" title="Java 的可移植性"></a>Java 的可移植性</h1><p>这是 Java 语言最大的特点，指的是同一个程序可以在不同的操作系统之间进行任意的部署，以此降低了开发的难度</p><p>想要实现可移植性的控制，主要是依靠 JVM （Java 虚拟机）</p><p>Java 虚拟机是一个由软件和硬件模拟出来的计算机，所有的程序只要有 Java 虚拟机的支持，就可以实现程序的执行，并且不同的操作系统上会有不同的 Java 虚拟机存在，这样就可以实现移植性</p><p>所有 Java 程序的解释都要求放在 JVM 里处理</p><p>所有 *.java 的源代码程序最终都需要经过编译后才能使用，但是编译完成的程序代码并不是绑定在某个具体操作系统上的程序，而是一种通用性的程序，这种通用性的程序就是 JVM 能够识别的代码</p><p>Java 编译器只针对 JVM 产生 *.class 文件，独立于平台之外，所以 *.class 只针对不同的 JVM 生成，由 JVM 去适应平台</p><p>所有的 Java 程序并不是直接运行在操作系统上，而是通过 JVM 执行，这样比直接在操作系统上执行程序的处理速度要慢，但是随着硬件技术的提高，这些问题可以忽略，只是依然存在 JVM 的调优问题</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-的主要特点&quot;&gt;&lt;a href=&quot;#Java-的主要特点&quot; class=&quot;headerlink&quot; title=&quot;Java 的主要特点&quot;&gt;&lt;/a&gt;Java 的主要特点&lt;/h1&gt;&lt;p&gt;Java 之所以可以得到持续的发展力以及良好的生态系统，这完全取决于 Java 自身的技术特征：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>

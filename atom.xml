<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TUFZ&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/9e970c58d441a1f42dead553ef9ca78d</icon>
  <subtitle>静心守志</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itufz.com/"/>
  <updated>2020-03-24T06:27:57.634Z</updated>
  <id>http://itufz.com/</id>
  
  <author>
    <name>TUFZ</name>
    <email>waringhu@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java数据类型划分</title>
    <link href="http://itufz.com/2020/03/24/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/"/>
    <id>http://itufz.com/2020/03/24/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/</id>
    <published>2020-03-24T06:27:57.000Z</published>
    <updated>2020-03-24T06:27:57.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java 方法的定义及使用【Java 学习笔记 08】</title>
    <link href="http://itufz.com/2020/03/23/Java%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://itufz.com/2020/03/23/Java%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-23T05:59:09.000Z</published>
    <updated>2020-03-23T06:00:07.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在程序之中，很多情况下需要重复执行一些代码，方法（method）也称之为函数，需要注意的是，进行方法定义有一个前提：方法在主类中定义并且由主方法直接调用</p><a id="more"></a><h1 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h1><p>方法的返回值可以使用 Java 中定义的数据类型（基本数据类型、引用数据类型），在方法之中可以进行返回数据的处理，如果要返回数据就是用 return 来描述，return 返回的数据类型与方法返回值的数据类型相同，如果不返回数据则该方法可以使用 void 进行声明</p><p>关于方法名称与变量的定义命名要求：</p><ul><li>方法名称：第一个单词字母小写，而后每个单词的首字母大写</li><li>变量名称：第一个单词字母小写，而后每个单词的首字母大写</li></ul><p>方法的定义可以方便使用者重复调用，所有的程序都是从主方法开始的，方法定义不要太长，应使单个方法容易理解</p><p>在进行方法定义的时候，如果方法的返回值类型为 void，那么可以利用 return 来结束调用</p><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>当方法名称相同，参数的类型或者个数不同的时候就叫方法重载</p><p>eg. 不同类型的数据进行加法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20.0</span>, <span class="number">10.1</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个方法名称可以根据调用时传递的不同参数的类型或个数实现不同方法体的调用，这就实现了方法重载的定义，方法的重载与方法的返回值类型没有任何关系，只与参数有关，但是实际开发中：只要是方法重载，建议保持其方法的返回值类型相同</p><p>eg. <code>System.out.println();</code> 就是一个系统自带的方法重载，它可以接收不同数据类型的参数</p><h1 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h1><p>方法的递归调用指的是一个方法自己调用自己，利用递归调用可以解决一些重复且麻烦的问题，在进行方法递归调用时，需要考虑如下问题：</p><ul><li>一定要设置方法递归调用的结束条件</li><li>每一次调用的过程之中一定要修改传递的参数条件</li></ul><p>eg. 利用递归求 1 + 2 + 3 + … … + 1000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num + sum(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归可以简化代码调用，但是实际开发很少会出现递归，大部分情况下都只是考虑一些简单的处理逻辑，递归如果使用不当，则会造成内存溢出</p><p>eg. 计算 1! + 2! + 3! + … … + 90!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">90</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fan(num) + sum(num -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">fan</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * fan(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上有一部分递归是可以通过循环来完成的，但是使用递归要比使用循环结构更清晰简洁</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在程序之中，很多情况下需要重复执行一些代码，方法（method）也称之为函数，需要注意的是，进行方法定义有一个前提：方法在主类中定义并且由主方法直接调用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 程序逻辑控制【Java 学习笔记 07】</title>
    <link href="http://itufz.com/2020/03/21/Java%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/"/>
    <id>http://itufz.com/2020/03/21/Java%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/</id>
    <published>2020-03-21T14:41:12.000Z</published>
    <updated>2020-03-21T15:15:03.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="if-分支结构"><a href="#if-分支结构" class="headerlink" title="if 分支结构"></a>if 分支结构</h1><p>程序开发的过程中会存在三种程序逻辑：顺序结构、分支结构、循环结构，if 分支结构主要是针对关系表达式进行判断处理的分支操作，分支语句主要有三种使用形式，使用的关键字：if、else</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    条件不满足时执行;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 if 最主要的特点就是它可以进行若干个条件判断，进行多条件判断时可以不写 else 语句，但是最好总是写上 else 语句</p><h1 id="switch-开关语句"><a href="#switch-开关语句" class="headerlink" title="switch 开关语句"></a>switch 开关语句</h1><p>switch 是一个开关语句，它主要是根据内容来进行判断，需要注意的是 switch 中可以判断的只能是数据（int、char、枚举、String），switch 不能使用逻辑判断，注意：JDK 1.7 之后才支持 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (数据) &#123;</span><br><span class="line">    <span class="keyword">case</span> 数值:</span><br><span class="line">        数值满足时执行;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 数值:</span><br><span class="line">        数值满足时执行;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        所有数值均不满足时执行;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句在进行设计的时候，如果没有在每一个 case 后面追加 break 语句，那么会在第一个匹配的 case 之后继续执行，知道全部 switch 中的后续代码执行完毕或者遇见 break</p><h1 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h1><p>在程序之中提供有 while 语句来实现循环，该语句有两种定义形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="keyword">while</span> (布尔表达式) &#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">    修改循环条件;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// do...while</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">    修改循环条件;</span><br><span class="line">&#125; <span class="keyword">while</span> (布尔表达式);</span><br></pre></td></tr></table></figure><p>while 循环与 do…while 循环的区别：</p><ul><li>while 是先判断再执行</li><li>do…while 是先执行一次再判断</li></ul><p>实际开发中一般很少用到 do…while</p><h1 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h1><p>for 循环定义的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (定义循环的初始化数值; 循环判断; 修改循环数据) &#123;</span><br><span class="line">    循环语句的执行;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 while 和 for 循环的选择只有一个参考标准：</p><ul><li>在明确确定循环次数的情况下，优先使用 for 循环</li><li>在不知道循环次数，但是知道循环结束条件的情况下，优先使用 while 循环</li></ul><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><p>在循环语句定义的时候通常会使用到的两个循环控制语句：break，continue</p><ul><li>break 的主要功能是退出整个循环结构</li><li>continue 只是结束当前一次循环的执行，跳过当前一次循环</li></ul><p>利用 continue 实现 goto 的功能（不建议开发时使用如上代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        point: <span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">10</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">3</span>; y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">                    <span class="keyword">continue</span> point;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><p>在一个循环语句之中嵌套其他循环语句，循环嵌套的层次越多，时间复杂度越高</p><p>eg. 打印乘法口诀表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>; a&lt;<span class="number">10</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">1</span>; b&lt;=a; b++) &#123;</span><br><span class="line">                System.out.print(a + <span class="string">" x "</span> + b + <span class="string">"= "</span> + (a*b) + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg. 打印三角形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> line = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;line; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;line-x; y++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;=x; y++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;if-分支结构&quot;&gt;&lt;a href=&quot;#if-分支结构&quot; class=&quot;headerlink&quot; title=&quot;if 分支结构&quot;&gt;&lt;/a&gt;if 分支结构&lt;/h1&gt;&lt;p&gt;程序开发的过程中会存在三种程序逻辑：顺序结构、分支结构、循环结构，if 分支结构主要是针对关系表达式进行判断处理的分支操作，分支语句主要有三种使用形式，使用的关键字：if、else&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 运算符【Java 学习笔记 06】</title>
    <link href="http://itufz.com/2020/03/20/Java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://itufz.com/2020/03/20/Java%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-03-20T14:20:03.000Z</published>
    <updated>2020-03-20T14:21:48.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>所有的程序开发就是一种数字处理游戏，对于数字的处理一定会有所谓的操作模式，而这些操作模式就称为运算符，在程序开发中，会提供大量的基础运算符，这些运算符都有自己各自的优先顺序，不用记住，<code>()</code> 优先级最高，合理使用 <code>()</code> 就可以了</p><a id="more"></a><h1 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h1><p> 在 Java 中数学运算都提供了标准的支持，包括四则运算等等，在进行变量计算的时候，编程语言一般都会提供简化的运算符支持</p><p>eg. num = num + 1《=》num += 1</p><p><code>++</code> 、<code>--</code> 的两类运算方法：</p><ul><li>++num、–num：先进行 num 的自增或者自减，在进行数字计算</li><li>num++、num–：先进行 num 的数字计算，再进行自增或者自减</li></ul><p>最好不使用以上操作，怎么简单怎么写</p><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><p> 关系运算的主要特征就是进行大小的比较处理，包括：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 大于</span></span><br><span class="line">&lt; <span class="comment">// 小于</span></span><br><span class="line">&gt;= <span class="comment">// 大于等于</span></span><br><span class="line">&lt;= <span class="comment">// 小于等于</span></span><br><span class="line">!= <span class="comment">// 不等于</span></span><br><span class="line">== <span class="comment">// 等于</span></span><br></pre></td></tr></table></figure><p>所有的关系运算返回的判断结果都是布尔类型数据，进行关系判断的时候特别注意等于的判断，使用 <code>==</code>，进行关系运算的时候可以针对所有的基本数据类型，也可以使用字符来进行关系运算，因为数据类型之间提供转型支持，所以再进行字符的判断的时候，字符会自动转为 int 而后进行数字的比较</p><h1 id="三目赋值运算符"><a href="#三目赋值运算符" class="headerlink" title="三目赋值运算符"></a>三目赋值运算符</h1><p>在进行程序开发的时候三目运算符使用得很多，而且合理使用三目运算可以避免大范围程序编写，三目是一种所谓的赋值运算的处理，它是需要设置一个逻辑关系的判断之后才可以进行的赋值操作，基本语法：</p><p><code>关系运算 ? 关系满足时的内容 : 关系不满足时的内容</code></p><p>eg. 判断两个数字的大小，输出最大数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> max = a &gt; b ? a : b;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序开发的核心要点：尽可能精简代码</p><p>三目运算本身也可以进行嵌套处理，也就是说在赋值语句的位置上可以进一步编写三目运算，但是程序可读性会降低，根据实际情况决定是否嵌套</p><p>eg. 三目运算的嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c) ? b : c;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>位运算是指可以直接进行二进制数据的计算处理，主要有：&amp;（与）、|（或）、^（异或）、~（反码）、移位运算</p><p>想理解位操作，一定要清楚十进制与二进制之间转换的逻辑：数字除以 2 取余数，eg. 13 ➡ 1101，注意：Java 中的整型是 32 位，所以：13 ➡ 00000000 00000000 00000000 00001101</p><p>eg. 与操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line">        System.out.println(a &amp; b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span> 的二进制 ➡ <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 的二进制  ➡  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000111</span></span><br><span class="line"></span><br><span class="line">&amp; 的结果    ➡  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span> ➡ <span class="number">5</span></span><br></pre></td></tr></table></figure><p>在进行位运算的时候还可以进行移位运算，eg. 求 2 的 3 次方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        System.out.println(a &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> 的二进制： ➡ <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000010</span></span><br><span class="line">向左移 <span class="number">2</span> 位：➡ <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001000</span> ➡ <span class="number">8</span></span><br></pre></td></tr></table></figure><p>&amp; 和 &amp;&amp;、| 和 || 的区别：</p><ul><li>&amp; 和 | 是两个可以进行位运算与逻辑运算的运算符<ul><li>在进行逻辑运算的时候所有的判断条件都要执行 </li><li>在进行位运算的时候只是对当前数据进行与、或处理</li></ul></li><li>在逻辑运算上还可以使用 &amp;&amp;、||<ul><li>&amp;&amp;：在进行若干个条件判断的时候，如果前面的条件返回了 false，后续所有的条件都不再判断，最终的结果就是 false</li><li>||：在进行若干个条件判断的时候，如果前面的条件返回了 true，后续所有的条件都不再判断，最终的结果就是 true</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有的程序开发就是一种数字处理游戏，对于数字的处理一定会有所谓的操作模式，而这些操作模式就称为运算符，在程序开发中，会提供大量的基础运算符，这些运算符都有自己各自的优先顺序，不用记住，&lt;code&gt;()&lt;/code&gt; 优先级最高，合理使用 &lt;code&gt;()&lt;/code&gt; 就可以了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 基本概念【Java 学习笔记 04】</title>
    <link href="http://itufz.com/2020/03/20/Java%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://itufz.com/2020/03/20/Java%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-03-20T06:15:55.000Z</published>
    <updated>2020-03-20T13:39:49.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>注释是程序开发之中的一项重要组成技术，合理的注释能使项目维护更加方便</p><a id="more"></a><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在 Java 语言里面注释一共有三类：</p><ul><li>单行注释：// xxxxxx</li><li>多行注释：/* xxxxx */</li><li>文档注释：/** xxxxx */，文档注释里面还需要很多的选项，一般建议共同开发工具控制</li></ul><p>eg. 定义单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单行注释：下面的语句是进行一行提示信息的输出</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg. 定义多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        单行注释：</span></span><br><span class="line"><span class="comment">        下面的语句是进行一行提示信息的输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用开发工具开发时，还是单行注释会比较方便，而对于一些重要的类和方法都建议使用文档注释</p><h1 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h1><p>在任何程序之中，都是一个结构的整合体，在 Java 语言里面有不同的结构，eg. 类、方法、变量结构等，对于不同的结构一定要有不同的说明，对于结构的说明实际上就是标识符，是有命名要求的，但是一般都是要求有意义的单词所组成，同时对于标识符的组成在 Java 之中定义如下：</p><ul><li>由字母、数字、_、$ 所组成</li><li>不能使用数字开头</li><li>不能使用 Java 中的保留字（关键字）</li></ul><p>最简单的定义标识符的形式：使用英文开头，对于 $ 一般都有特殊的含义，不建议出现在自己所编写的代码之中</p><p>关键字：系统对于一些结构的描述处理，有特殊的含义，eg. public、class 等，Java 中的关键字一共有如下内容：</p><ul><li>不需要背，必要时可上网查</li></ul><p>对于关键字的定义不需要背，对于部分关键字有一些简短说明</p><ul><li>JDK 1.4 =》assert 关键字，用于异常处理</li><li>JDK 1.5 =》enum 关键字，用于枚举定义</li><li>未使用到的关键字：goto、const</li><li>还有一些属于特殊含义的单词，严格来讲不算关键字：true、false、null</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注释是程序开发之中的一项重要组成技术，合理的注释能使项目维护更加方便&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>初识 Java 开发【Java 学习笔记 03】</title>
    <link href="http://itufz.com/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/"/>
    <id>http://itufz.com/2020/03/20/%E5%88%9D%E8%AF%86Java%E5%BC%80%E5%8F%91/</id>
    <published>2020-03-20T01:46:51.000Z</published>
    <updated>2020-03-20T13:40:04.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>编写 Java 程序可以不使用特定编辑器，所有 Java 程序的后缀都是 <code>*.java</code>，我们可以建立一个目录保存所有的程序源代码</p><a id="more"></a><h1 id="Java-编程起步"><a href="#Java-编程起步" class="headerlink" title="Java 编程起步"></a>Java 编程起步</h1><p>定义第一个程序代码：</p><p><code>Hello.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 程序需要经过两次处理才可以正常执行：</p><ul><li>对源代码程序进行编译：<code>javac Hello.java</code>，编译之后会生成一个 <code>Hello.class</code> 的字节码文件，整个过程原理就是利用 JVM 编译出一套与操作平台无关的字节码文件（<code>*.class</code>）</li><li>在 JVM 上进行程序的解释：<code>java Hello</code>，<strong>注意：</strong> 这里解释的是字节码文件，字节码文件的后缀（<code>*.class</code>）是不需要编写的</li></ul><p>解释一下第一个程序：</p><ol><li>在 Java 程序开发中最基础的单元是类，所有的程序都必须封装在类当中执行，而类的基本定义语法如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在程序中定义的类名称是：<code>Hello</code>，类的定义有两种形式：</p><ul><li><code>public class 类名称 {}</code>：类名称必须与文件名称保持一致，在一个 <code>*.java</code> 文件里只能有一个 <code>public class</code> 定义</li><li><code>class 类名称 {}</code>：类名称可以与文件名称不一致，但是编译后的 <code>*.class</code> 的名称是 <code>calss</code> 定义的类，解释的时候要求解释生成的 <code>*.class</code> 字节码文件，在一个 <code>*.java</code> 文件里面可以有多个 <code>class</code> 定义，并且编译之后会生成不同的 <code>*.class</code> 文件</li></ul><p><strong>注意：</strong> 关于源代码类定义的问题：</p><ul><li>在项目开发中，很少会出现在一个 <code>*.java</code> 源代码里面定义多个 <code>class</code> 类的情况，所以一般在一个 <code>*.java</code> 源代码里就定义一个 <code>public class</code> 类就够了</li><li>Java 语言有着明确的要求，定义类名称的时候要求每一个单词的首字母必须大写，eg. HelloWorld、TestDemo 这样才符合标准</li></ul><ol start="2"><li>主方法：是所有程序执行的起点，并且一定要定义在类中，Java 的主方法定义：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 程序的代码由此开始执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>String args[]</code> &lt;=&gt; <code>String [] args</code></p><p>必须记住主方法怎么写，即使没有代码补全也能写出来，主方法所在的类统一称为 “主类”，所有的 “主类” 都使用 <code>public class 类名称 {}</code> 来定义</p><ol start="3"><li>屏幕打印（系统输出）：可以直接在命令行方式下进行内容的显示，有如下两种语法：</li></ol><ul><li>输出之后追加换行：<code>System.out.println(输出内容);</code></li><li>输出之后不追加换行：<code>System.out.print(输出内容);</code></li></ul><h1 id="JShell-工具"><a href="#JShell-工具" class="headerlink" title="JShell 工具"></a>JShell 工具</h1><p>Shell 是脚本程序的含义，在很多编程语言里面为了方便使用者进行代码开发，都会有 Shell 交互式编程环境，可能只是为了一些简短的程序验证，但是在 Java 里面需要编写很多的结构代码才能实现，所以为了解决这样的麻烦，提供了 JShell 指令，直接 cmd 执行指令 <code>jshell</code> 即可</p><p>除了可以直接在 JShell 命令之中进行程序的编写之外，也可以将一些内容交给一些文件来进行保存</p><p>eg. 在 <code>D:/hello.txt</code> 写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.out.println(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><p>在 JShell 执行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;open d:&#x2F;hello.txt</span><br></pre></td></tr></table></figure><p>屏幕能够成功输出 <code>hello</code></p><p>所以使用 JShell 只需要编写核心结构的代码即可，减少了对于结构化的需求，执行指令 <code>/exit</code> 即可退出 JShell 交互式界面</p><h1 id="CLASSPATH-环境属性"><a href="#CLASSPATH-环境属性" class="headerlink" title="CLASSPATH 环境属性"></a>CLASSPATH 环境属性</h1><p>CLASSPATH 完整理解非常复杂，这里暂时了解其概念</p><p>eg. 在 <code>D:/JavaCode</code> 下有一个叫 <code>Hello.class</code> 的字节码文件，当前用户所在的目录为 <code>D:/JavaCode</code>，那么在这种情况之下可以直接使用 <code>java</code> 命令进行 <code>Hello.class</code> 字节码文件的解释，但是如果现在用户脱离了这个目录，去到了 <code>C:/</code> （C 盘目录下并没有 <code>Hello.class</code> 字节码文件），如果再次执行程序解释，会出现错误提示：<code>找不到或无法加载主类 Hello</code></p><p>如果我们要执行不同目录下的程序，就需要依靠 CLASSPATH 环境属性</p><p>定义 CLASSPATH 环境属性：<code>SET CLASSPATH = D:/JavaCode</code></p><p>设置了 CLASSPATH 之后，这个时候在 Java 程序解释的时候会自动通过 CLASSPATH 所设置的路径进行类的加载，所以可知：JVM 解释程序的时候需要得到 CLASSPATH 的支持</p><p>但是在默认情况下，所有解释的类都是从当前所在的目录中加载的，所以可知：CLASSPATH 的默认设置为当前所在目录加载类文件，很明显如果在非当前目录设置 CLASSPATH 就会使整个系统操作混乱，所以最好采用默认的设置，如果这时候想只通过当前目录加载，则可以将 CLASSPATH 设置为 <code>.</code></p><p>eg. 设置从当前所在路径加载类 <code>SET CLASSPATH = .</code></p><p>有些时候如果安装了一些与 Java 开发相关的程序，它可能会自动修改默认的 CLASSPATH，所以就需要自己设置回来</p><p><strong>注意：</strong> 现在 CLASSPATH 是在一个命令行下的配置，如果该命令行关闭了，那么相关的属性配置也将消失，所以应该将其定义为全局属性，则可以直接在系统中追加一个属性信息</p><p>配置方法：新建用户变量 <code>CLASSPATH = .</code></p><p>PATH 和 CLASSPATH 的区别？</p><ul><li>PATH：是操作系统提供的路径配置，定义所有可执行程序的路径</li><li>CLASSPATH：是 JRE 提供的，用于定义 Java 程序解释时的类加载路径，默认设置为当前目录加载，可以通过 <code>SETCLASSPATH = 路径</code> 的命令形式来进行定义</li></ul><p>JVM 解释字节码文件的寻访过程：JVM ➡ CLASSPATH 定义的路径 ➡ 加载字节码文件，所以 CLASSPATH 是 Java 定义的环境属性，是在 Java 程序解释的时候使用的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写 Java 程序可以不使用特定编辑器，所有 Java 程序的后缀都是 &lt;code&gt;*.java&lt;/code&gt;，我们可以建立一个目录保存所有的程序源代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建Java开发环境</title>
    <link href="http://itufz.com/2020/03/20/%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://itufz.com/2020/03/20/%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2020-03-20T01:45:13.000Z</published>
    <updated>2020-03-24T06:29:35.108Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Java 语言属于编译型和解释型语言的开发语言，如果要进行 Java 开发，一定要进行 JDK （Java 开发工具）的安装配置，JDK 可以实现 Java 语言的编译与解释</p><a id="more"></a><h1 id="JDK-简介"><a href="#JDK-简介" class="headerlink" title="JDK 简介"></a>JDK 简介</h1><ul><li>如果进行实际的项目开发的生产环境部署，现阶段还是应该以使用 JDK 1.8 版本为主</li><li>JDK 1.9 和 JDK 1.10 差别不大</li><li>JRE 指的是 Java 运行时环境，只提供程序的解释功能，不提供程序的开发功能，当本机上已经配置好了 JDK 之后，将自动进行 JRE 的更新</li></ul><h1 id="JDK-安装与配置"><a href="#JDK-安装与配置" class="headerlink" title="JDK 安装与配置"></a>JDK 安装与配置</h1><p>安装：不会就自行百度</p><p>在 JDK 里所有的可执行程序的路径为：X:\xx\jdk-xx\bin，主要使用 <code>javac.exe</code> 和 <code>java.exe</code>，但是这两个程序并不属于 Windows 本身，如果想要在命令行里面直接使用，就必须在 Windows 的系统环境之中进行可执行程序的路径配置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 语言属于编译型和解释型语言的开发语言，如果要进行 Java 开发，一定要进行 JDK （Java 开发工具）的安装配置，JDK 可以实现 Java 语言的编译与解释&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 语言简介【Java 学习笔记 01】</title>
    <link href="http://itufz.com/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>http://itufz.com/2020/03/20/Java%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</id>
    <published>2020-03-20T01:28:44.000Z</published>
    <updated>2020-03-20T13:39:59.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Java 之所以可以得到持续的发展力以及良好的生态系统，这完全取决于 Java 自身的技术特征：</p><a id="more"></a><h1 id="Java-的主要特点"><a href="#Java-的主要特点" class="headerlink" title="Java 的主要特点"></a>Java 的主要特点</h1><ol><li>是一个行业内通用的技术实现标准，Java 本身是一个半开源产品，很多厂商能够接触到 Java 的底层，使得 Java 开发更加透明</li><li>是一门面向对象编程语言，使得 Java 语言语法结构更加方便开发者接受，且这些面向对象的设计思想还在不断进行着扩充（不同的 JDK 版本）</li><li>提供有方便的内存回收处理机制，像一些编程语言里需要明确的手工进行对象的回收与释放，否则程序将不能正常提供支持，但是 Java 提供自动的内存回收操作，这样会更加方便（但是又涉及到优化方面的问题）</li><li>避免了复杂的指针问题，而使用更加简单的引用来代替指针，指针虽然是一种高效的内存处理模式，但是需要很强的逻辑分析，而 Java 在设计之初就考虑到了这一点，所以直接利用引用就可以简化指针的处理，而引用也是在初学过程中最为麻烦，最难以理解的部分</li><li>Java 是为数不多支持多线程开发的编程语言，这样就可以使得单位时间内处理的性能得到提升（性能的提升并不是绝对的），多线程开发也是 Java 开发之中最难以理解的一部分，而正确的多线程处理才是提升处理性能的核心所在</li><li>Java 提供有高效的网络处理能力，可以基于 NIO 实现更加高效的数据传输处理</li><li>Java 具有良好的可移植性，这样就可以提升一个程序的适用范围</li></ol><h1 id="Java-的可移植性"><a href="#Java-的可移植性" class="headerlink" title="Java 的可移植性"></a>Java 的可移植性</h1><p>这是 Java 语言最大的特点，指的是同一个程序可以在不同的操作系统之间进行任意的部署，以此降低了开发的难度</p><p>想要实现可移植性的控制，主要是依靠 JVM （Java 虚拟机）</p><p>Java 虚拟机是一个由软件和硬件模拟出来的计算机，所有的程序只要有 Java 虚拟机的支持，就可以实现程序的执行，并且不同的操作系统上会有不同的 Java 虚拟机存在，这样就可以实现移植性</p><p>所有 Java 程序的解释都要求放在 JVM 里处理</p><p>所有 *.java 的源代码程序最终都需要经过编译后才能使用，但是编译完成的程序代码并不是绑定在某个具体操作系统上的程序，而是一种通用性的程序，这种通用性的程序就是 JVM 能够识别的代码</p><p>Java 编译器只针对 JVM 产生 *.class 文件，独立于平台之外，所以 *.class 只针对不同的 JVM 生成，由 JVM 去适应平台</p><p>所有的 Java 程序并不是直接运行在操作系统上，而是通过 JVM 执行，这样比直接在操作系统上执行程序的处理速度要慢，但是随着硬件技术的提高，这些问题可以忽略，只是依然存在 JVM 的调优问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 之所以可以得到持续的发展力以及良好的生态系统，这完全取决于 Java 自身的技术特征：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 学习笔记" scheme="http://itufz.com/categories/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://itufz.com/tags/Java/"/>
    
      <category term="学习笔记" scheme="http://itufz.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
